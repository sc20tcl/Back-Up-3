/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CarPooling {
  export type DriverStruct = { isRegistered: boolean; hasRide: boolean };

  export type DriverStructOutput = [isRegistered: boolean, hasRide: boolean] & {
    isRegistered: boolean;
    hasRide: boolean;
  };

  export type PassengerStruct = { isRegistered: boolean; hasRide: boolean };

  export type PassengerStructOutput = [
    isRegistered: boolean,
    hasRide: boolean
  ] & { isRegistered: boolean; hasRide: boolean };

  export type RideStruct = {
    rideId: BigNumberish;
    driver: AddressLike;
    travelTime: BigNumberish;
    availableSeats: BigNumberish;
    totalSeats: BigNumberish;
    seatPrice: BigNumberish;
    origin: BigNumberish;
    destination: BigNumberish;
    status: BigNumberish;
    passengerAddr: AddressLike[];
  };

  export type RideStructOutput = [
    rideId: bigint,
    driver: string,
    travelTime: bigint,
    availableSeats: bigint,
    totalSeats: bigint,
    seatPrice: bigint,
    origin: bigint,
    destination: bigint,
    status: bigint,
    passengerAddr: string[]
  ] & {
    rideId: bigint;
    driver: string;
    travelTime: bigint;
    availableSeats: bigint;
    totalSeats: bigint;
    seatPrice: bigint;
    origin: bigint;
    destination: bigint;
    status: bigint;
    passengerAddr: string[];
  };
}

export interface CarPoolingCoordinationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "actionOptimalPairs"
      | "assignPassengersToRides"
      | "assignedRiders"
      | "awaitAssignRide"
      | "awaitingRideCount"
      | "completeRide"
      | "createOptimalPairs"
      | "createRide"
      | "driverRegister"
      | "findOptimalPairings"
      | "findRides"
      | "getDriver"
      | "getPassenger"
      | "getRideById"
      | "joinRide"
      | "optimalPairCount"
      | "optimalPairList"
      | "passengerRegister"
      | "rideCount"
      | "sortArray"
      | "startRide"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RideCompleted"
      | "RideCreated"
      | "RideJoined"
      | "RideStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "actionOptimalPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignPassengersToRides",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignedRiders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "awaitAssignRide",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "awaitingRideCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeRide",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOptimalPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRide",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "driverRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findOptimalPairings",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findRides",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPassenger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRideById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinRide",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optimalPairCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimalPairList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "passengerRegister",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rideCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sortArray",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRide",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "actionOptimalPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignPassengersToRides",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignedRiders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awaitAssignRide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awaitingRideCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOptimalPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRide", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "driverRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOptimalPairings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findRides", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDriver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPassenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRideById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinRide", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimalPairCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalPairList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "passengerRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rideCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sortArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startRide", data: BytesLike): Result;
}

export namespace RideCompletedEvent {
  export type InputTuple = [rideId: BigNumberish];
  export type OutputTuple = [rideId: bigint];
  export interface OutputObject {
    rideId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RideCreatedEvent {
  export type InputTuple = [
    rideId: BigNumberish,
    driver: AddressLike,
    travelTime: BigNumberish,
    availableSeats: BigNumberish,
    seatPrice: BigNumberish,
    origin: BigNumberish,
    destination: BigNumberish
  ];
  export type OutputTuple = [
    rideId: bigint,
    driver: string,
    travelTime: bigint,
    availableSeats: bigint,
    seatPrice: bigint,
    origin: bigint,
    destination: bigint
  ];
  export interface OutputObject {
    rideId: bigint;
    driver: string;
    travelTime: bigint;
    availableSeats: bigint;
    seatPrice: bigint;
    origin: bigint;
    destination: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RideJoinedEvent {
  export type InputTuple = [rideId: BigNumberish, passenger: AddressLike];
  export type OutputTuple = [rideId: bigint, passenger: string];
  export interface OutputObject {
    rideId: bigint;
    passenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RideStartedEvent {
  export type InputTuple = [rideId: BigNumberish];
  export type OutputTuple = [rideId: bigint];
  export interface OutputObject {
    rideId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarPoolingCoordination extends BaseContract {
  connect(runner?: ContractRunner | null): CarPoolingCoordination;
  waitForDeployment(): Promise<this>;

  interface: CarPoolingCoordinationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  actionOptimalPairs: TypedContractMethod<[], [void], "nonpayable">;

  assignPassengersToRides: TypedContractMethod<[], [void], "nonpayable">;

  assignedRiders: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  awaitAssignRide: TypedContractMethod<
    [
      _source: BigNumberish,
      _destination: BigNumberish,
      preferredTravelTime: BigNumberish
    ],
    [void],
    "payable"
  >;

  awaitingRideCount: TypedContractMethod<[], [bigint], "view">;

  completeRide: TypedContractMethod<
    [_rideId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createOptimalPairs: TypedContractMethod<[], [void], "nonpayable">;

  createRide: TypedContractMethod<
    [
      _travelTime: BigNumberish,
      _availableSeats: BigNumberish,
      _seatPrice: BigNumberish,
      _origin: BigNumberish,
      _destination: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  driverRegister: TypedContractMethod<[], [void], "nonpayable">;

  findOptimalPairings: TypedContractMethod<
    [sortedRideIds: BigNumberish[], sortedAwaitingRideIds: BigNumberish[]],
    [[bigint[], bigint]],
    "view"
  >;

  findRides: TypedContractMethod<
    [_source: BigNumberish, _destination: BigNumberish],
    [bigint[]],
    "view"
  >;

  getDriver: TypedContractMethod<
    [addr: AddressLike],
    [CarPooling.DriverStructOutput],
    "view"
  >;

  getPassenger: TypedContractMethod<
    [addr: AddressLike],
    [CarPooling.PassengerStructOutput],
    "view"
  >;

  getRideById: TypedContractMethod<
    [_rideId: BigNumberish],
    [CarPooling.RideStructOutput],
    "view"
  >;

  joinRide: TypedContractMethod<[_rideId: BigNumberish], [void], "payable">;

  optimalPairCount: TypedContractMethod<[], [bigint], "view">;

  optimalPairList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        rideId: bigint;
        aRideId: bigint;
        deviation: bigint;
      }
    ],
    "view"
  >;

  passengerRegister: TypedContractMethod<[], [void], "nonpayable">;

  rideCount: TypedContractMethod<[], [bigint], "view">;

  sortArray: TypedContractMethod<
    [arr: BigNumberish[], typeCode: BigNumberish],
    [bigint[]],
    "view"
  >;

  startRide: TypedContractMethod<[_rideId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "actionOptimalPairs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignPassengersToRides"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignedRiders"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "awaitAssignRide"
  ): TypedContractMethod<
    [
      _source: BigNumberish,
      _destination: BigNumberish,
      preferredTravelTime: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "awaitingRideCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeRide"
  ): TypedContractMethod<[_rideId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createOptimalPairs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRide"
  ): TypedContractMethod<
    [
      _travelTime: BigNumberish,
      _availableSeats: BigNumberish,
      _seatPrice: BigNumberish,
      _origin: BigNumberish,
      _destination: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "driverRegister"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "findOptimalPairings"
  ): TypedContractMethod<
    [sortedRideIds: BigNumberish[], sortedAwaitingRideIds: BigNumberish[]],
    [[bigint[], bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "findRides"
  ): TypedContractMethod<
    [_source: BigNumberish, _destination: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDriver"
  ): TypedContractMethod<
    [addr: AddressLike],
    [CarPooling.DriverStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPassenger"
  ): TypedContractMethod<
    [addr: AddressLike],
    [CarPooling.PassengerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRideById"
  ): TypedContractMethod<
    [_rideId: BigNumberish],
    [CarPooling.RideStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinRide"
  ): TypedContractMethod<[_rideId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "optimalPairCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "optimalPairList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        rideId: bigint;
        aRideId: bigint;
        deviation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "passengerRegister"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rideCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sortArray"
  ): TypedContractMethod<
    [arr: BigNumberish[], typeCode: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "startRide"
  ): TypedContractMethod<[_rideId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "RideCompleted"
  ): TypedContractEvent<
    RideCompletedEvent.InputTuple,
    RideCompletedEvent.OutputTuple,
    RideCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RideCreated"
  ): TypedContractEvent<
    RideCreatedEvent.InputTuple,
    RideCreatedEvent.OutputTuple,
    RideCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RideJoined"
  ): TypedContractEvent<
    RideJoinedEvent.InputTuple,
    RideJoinedEvent.OutputTuple,
    RideJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RideStarted"
  ): TypedContractEvent<
    RideStartedEvent.InputTuple,
    RideStartedEvent.OutputTuple,
    RideStartedEvent.OutputObject
  >;

  filters: {
    "RideCompleted(uint256)": TypedContractEvent<
      RideCompletedEvent.InputTuple,
      RideCompletedEvent.OutputTuple,
      RideCompletedEvent.OutputObject
    >;
    RideCompleted: TypedContractEvent<
      RideCompletedEvent.InputTuple,
      RideCompletedEvent.OutputTuple,
      RideCompletedEvent.OutputObject
    >;

    "RideCreated(uint256,address,uint8,uint8,uint256,uint8,uint8)": TypedContractEvent<
      RideCreatedEvent.InputTuple,
      RideCreatedEvent.OutputTuple,
      RideCreatedEvent.OutputObject
    >;
    RideCreated: TypedContractEvent<
      RideCreatedEvent.InputTuple,
      RideCreatedEvent.OutputTuple,
      RideCreatedEvent.OutputObject
    >;

    "RideJoined(uint256,address)": TypedContractEvent<
      RideJoinedEvent.InputTuple,
      RideJoinedEvent.OutputTuple,
      RideJoinedEvent.OutputObject
    >;
    RideJoined: TypedContractEvent<
      RideJoinedEvent.InputTuple,
      RideJoinedEvent.OutputTuple,
      RideJoinedEvent.OutputObject
    >;

    "RideStarted(uint256)": TypedContractEvent<
      RideStartedEvent.InputTuple,
      RideStartedEvent.OutputTuple,
      RideStartedEvent.OutputObject
    >;
    RideStarted: TypedContractEvent<
      RideStartedEvent.InputTuple,
      RideStartedEvent.OutputTuple,
      RideStartedEvent.OutputObject
    >;
  };
}
